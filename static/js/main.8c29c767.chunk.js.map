{"version":3,"sources":["ToDoItem.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","react_default","a","createElement","newToDo","ToDoList","todos","this","map","index","src_ToDoItem","key","className","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","onSubmit","e","preventDefault","concat","toConsumableArray","setState","type","name","value","placeholder","onChange","defineProperty","target","src_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAciBA,SAXA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAMI,WCgBGC,mLAbV,IAAMC,EAAQC,KAAKP,MAAMM,MAAME,IAAI,SAACJ,EAASK,GAAV,OAC/BR,EAAAC,EAAAC,cAACO,EAAD,CACEC,IAAKF,EACLL,QAASA,MAGf,OACIH,EAAAC,EAAAC,cAAA,OAAKS,UAAU,YACVN,UAbMO,aC4CRC,cAzCb,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KAAMP,KACDqB,MACL,CAACf,MAAM,GACPF,QAAQ,IAJSW,wEAOV,IAAAO,EAAAf,KACP,OACIN,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,cAChBX,EAAAC,EAAAC,cAAA,8BAIFF,EAAAC,EAAAC,cAAA,QAAMoB,SAAU,SAACC,GACXA,EAAEC,iBACF,IAAMnB,EAAK,GAAAoB,OAAAV,OAAAW,EAAA,EAAAX,CAAOM,EAAKD,MAAMf,OAAlB,CAAyBgB,EAAKD,MAAMjB,UAC/CkB,EAAKM,SAAS,CAACtB,QAAOF,QAAS,OAE/BH,EAAAC,EAAAC,cAAA,SACE0B,KAAK,OACLC,KAAK,UACLC,MAAOxB,KAAKc,MAAMjB,QAClB4B,YAAc,uBACdC,SAAU,SAACT,GACTF,EAAKM,SAALZ,OAAAkB,EAAA,EAAAlB,CAAA,GAAgBQ,EAAEW,OAAOL,KAAON,EAAEW,OAAOJ,WAG3C9B,EAAAC,EAAAC,cAAA,UACA0B,KAAK,UADL,SAMJ5B,EAAAC,EAAAC,cAACiC,EAAD,CAAU9B,MAAOC,KAAKc,MAAMf,gBArCxBO,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8c29c767.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ToDoItem = props => {\r\n    return (\r\n      <li>\r\n        {props.newToDo}\r\n      </li>\r\n    );\r\n  }\r\n  \r\n  ToDoItem.propTypes = {\r\n    content: PropTypes.string,\r\n  };\r\n  export default ToDoItem;","import React, { Component} from 'react';\r\nimport ToDoItem from './ToDoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ToDoList extends Component{\r\n    static propTypes = {\r\n        todos: PropTypes.arrayOf(PropTypes.string)\r\n    }\r\n    render(){\r\n        const todos = this.props.todos.map((newToDo, index) => (\r\n            <ToDoItem\r\n              key={index}\r\n              newToDo={newToDo}\r\n            />\r\n          ));\r\n        return(\r\n            <div className=\"ToDoList\">\r\n                {todos}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n   export default ToDoList;","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport './App.css';\nimport  ToDoList from './ToDoList';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = \n    {todos:[],\n    newToDo:''};\n  }\n    \n  render() {\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>\n              Simple Todo App\n            </h1>\n          </header>\n          <form onSubmit={(e) => {\n                e.preventDefault();\n                const todos = [...this.state.todos, this.state.newToDo];\n                this.setState({todos, newToDo: ''});\n              }}>\n                <input\n                  type=\"text\"\n                  name=\"newToDo\"\n                  value={this.state.newToDo}\n                  placeholder = \"What should be done?\"\n                  onChange={(e) => {\n                    this.setState({[e.target.name]: e.target.value})\n                  }}\n                />\n                  <button\n                  type=\"submit\"\n                  >\n                SAVE\n                </button>\n              </form>\n              <ToDoList todos={this.state.todos} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}